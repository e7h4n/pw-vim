" Basics
    set shell&

" General
    set fileencodings=ucs-bom,utf-8,gbk
    set fileformats=unix,dos,mac
    set viewoptions-=options
    set spell&
    if v:version >= 703
        set rnu
    else
        set nu
    endif
    set noswapfile
    set wildignore+=node_modules,*-target,target,tmp_*
    set clipboard&
    set timeout
    set timeoutlen=300
    set ttimeoutlen=0
    set backupskip=/tmp/*,/private/tmp/*
    if v:version >= 704
        set wildignorecase
    endif
    set nomore
    set mouse=

" Vim UI
    let g:rehash256 = 1
    color molokai
    set scrolljump&
    set scrolloff&
    set list
    set listchars=tab:>-,trail:.,extends:>
    set ambiwidth=double
    set guifont=Droid\ Sans\ Mono\ For\ Powerline:h16
    " Always show sign col
    autocmd BufEnter * sign define dummy
    autocmd BufEnter * execute 'sign place 99999 line=1 name=dummy buffer=' . bufnr('')

" Formatting
    set wrap&
    autocmd FileType css,less,vm autocmd BufWritePre <buffer> call StripTrailingWhitespace()
    autocmd FileType jade setlocal sw=2 sts=2 st=2

" Key (re)Mappings
    nunmap j
    nunmap k
    vunmap <
    vunmap >

    " Paste yank register
    nmap gp "0p
    nmap gP "0P

    " map double j to <esc>
    inoremap <silent> jj <esc>

    " Emacs style command line course move
    cnoremap <C-A> <Home>
    cnoremap <C-E> <End>

    " Swap 0 and ^
    nnoremap 0 ^
    nnoremap ^ 0
    nnoremap d0 d^
    nnoremap d^ d0
    nnoremap c0 c^
    nnoremap c^ c0
    nnoremap y0 y^
    nnoremap y^ y0

    " Start shell
    map <Leader>sh :sh<CR>

    " search very magic like perl default, and use g/ to search very no magic
    nnoremap g/ /\v
    nnoremap g? ?\v

    map <space> :BufExplorer<cr>

" Plugins
    " NeoBundle
        let g:neobundle#types#git#default_protocol = 'git'

    " Tagbar
        if isdirectory(expand("~/.vim/bundle/tagbar/"))
            nnoremap <silent> <F10> :TagbarToggle<cr>
        endif

    " NerdTree
        if isdirectory(expand("~/.vim/bundle/nerdtree"))
            unmap <leader>e
            unmap <C-e>
            map <silent> <leader>nt :NERDTreeFind<CR>
            let NERDTreeIgnore = ['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.DS_Store']
            let NERDTreeQuitOnOpen = 0
            let NERDTreeShowHidden = 0
        endif

    " Tabularize
        if isdirectory(expand("~/.vim/bundle/tabular"))
            nmap <Leader>a" :Tabularize /"<CR>
            vmap <Leader>a" :Tabularize /"<CR>
            nmap <Leader>a/ :Tabularize /\/<CR>
            vmap <Leader>a/ :Tabularize /\/<CR>
        endif

    " unite
        if isdirectory(expand("~/.vim/bundle/unite.vim"))
            let g:unite_winheight = 10
            let g:unite_split_rule = 'botright'
            let g:unite_source_rec_async_command= ['ag', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', '']

            call unite#custom#source('file_mru', 'converters', ['converter_relative_word'])
            call unite#custom#source('file_rec/async', 'max_candidates', 10)
            call unite#custom#source('file_rec/async', 'sorters', ['sorter_ftime'])
            call unite#custom#profile('default', 'context', {
            \   'unique': 1,
            \   'direction': 'botright'
            \ })
            nnoremap <silent> <C-p> :Unite -start-insert file_rec/async file_mru<cr>

            let g:unite_source_grep_max_candidates = 200
            let g:unite_source_grep_command = 'ag'
            let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden --vimgrep'
            let g:unite_source_grep_recursive_opt = ''

            call unite#custom#profile('source/grep', 'context', {'no_quit' : 1})
            nnoremap <silent> <f3> :Unite grep<cr>

            let g:unite_source_history_yank_enable = 1
            nmap <leader>y :Unite history/yank<cr>
        endif

    " Gist
        if isdirectory(expand("~/.vim/bundle/gist-vim"))
            let g:gist_open_browser_after_post = 1
            let g:gist_post_private = 1
            let g:gist_show_private = 1
        endif

    " syntastic
        if isdirectory(expand("~/.vim/bundle/syntastic"))
            nnoremap <silent> <leader>l :SyntasticCheck<cr>
            let g:syntastic_always_populate_loc_list = 1
            let g:syntastic_javascript_checkers = ['jshint', 'jscs']
            let g:syntastic_check_on_wq = 0
            let g:syntastic_mode_map = { 'mode': 'passive',
                        \ 'active_filetypes': ['go'],
                        \ 'passive_filetypes': ['html', 'java'] }
        endif

    " Emmet
        if isdirectory(expand("~/.vim/bundle/emmet-vim"))
            let g:user_emmet_leader_key = '<c-k>'
        endif

    " Indent guides
        if isdirectory(expand("~/.vim/bundle/vim-indent-guides"))
            let g:indent_guides_auto_colors = 0
            autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#212121 ctermbg=235
            autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#404040 ctermbg=237
        endif

    " vitality
        if isdirectory(expand("~/.vim/bundle/vitality.vim"))
            let g:vitality_fix_focus = 0
        endif

    " airline
        if isdirectory(expand("~/.vim/bundle/vim-airline"))
            if !exists('g:airline_symbols')
                let g:airline_symbols = {}
            endif
            let g:airline_symbols.branch = '⎇ '
            let g:airline_symbols.linenr = '␊ '
            let g:airline_symbols.paste = 'Þ'

            let g:airline_theme = 'powerlineish'
            let g:airline_left_sep = ''
            let g:airline_right_sep = ''
        endif

    " surround
        if isdirectory(expand("~/.vim/bundle/vim-surround"))
            let g:surround_no_insert_mappings = 1
        endif

    " dash
        if isdirectory(expand("~/.vim/bundle/dash.vim"))
            nmap <silent> K <Plug>DashGlobalSearch
        endif

    " SnipMate
        if isdirectory(expand("~/.vim/bundle/vim-snipmate"))
            nmap <silent> <F9> :SnipMateOpenSnippetFiles<cr>
        endif

    " JSON
        if isdirectory(expand("~/.vim/bundle/vim-json"))
            let g:vim_json_syntax_conceal = 0
            autocmd FileType json setlocal foldmethod=syntax
            autocmd FileType json setlocal foldlevel=1
        endif

    " vim-go
        if isdirectory(expand("~/.vim/bundle/vim-go"))
            let g:go_fmt_fail_silently = 1
        endif

    " Startify
        if isdirectory(expand("~/.vim/bundle/vim-startify"))
            let g:startify_custom_header = [
                        \ "                    Code Works ",
                        \ "",
                        \ "                     _oo8oo_",
                        \ "                    o8888888o",
                        \ "                    88\" . \"88",
                        \ "                    (| -_- |)",
                        \ "                    0\\  =  /0",
                        \ "                  ___/'==='\\___",
                        \ "                .' \\\\|     |// '.",
                        \ "               / \\\\|||  :  |||// \\",
                        \ "              / _||||| -:- |||||_ \\",
                        \ "             |   | \\\\\\  -  /// |   |",
                        \ "             | \\_|  ''\\---/''  |_/ |",
                        \ "             \\  .-\\__  '-'  __/-.  /",
                        \ "           ___'. .'  /--.--\\  '. .'___",
                        \ "        .\"\" '<  '.___\\_<|>_/___.'  >' \"\".",
                        \ "       | | :  `- \\`.:`\\ _ /`:.`/ -`  : | |",
                        \ "       \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /",
                        \ "   =====`-.____`.___ \\_____/ ___.`____.-`=====",
                        \ "                     `=---=`",
                        \ "",
                        \ ]
            let g:startify_custom_footer =
                  \ ['', "   Vim is charityware. Please read ':help uganda'.", '']

            let g:startify_relative_path = 1

            let g:startify_skiplist = [
                   \ '.git',
                   \ 'node_modules',
                   \ 'logs',
                   \ 'bower_components'
                   \ ]
            hi StartifyBracket ctermfg=240
            hi StartifyNumber  ctermfg=215
            hi StartifyPath    ctermfg=245
            hi StartifySlash   ctermfg=240
            hi StartifySpecial ctermfg=240
            hi StartifyHeader  ctermfg=114
            hi StartifyFooter  ctermfg=240
        endif

" GUI Settings
    " GVIM- (here instead of .gvimrc)
        if has('gui_running')
            set guioptions=
        endif
